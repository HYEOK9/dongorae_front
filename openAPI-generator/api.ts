/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseResponseobject
 */
export interface BaseResponseobject {
    /**
     * 
     * @type {string}
     * @memberof BaseResponseobject
     */
    'detail'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BaseResponseobject
     */
    'isSuccess'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof BaseResponseobject
     */
    'result'?: object;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseobject
     */
    'statusCode'?: BaseResponseobjectStatusCodeEnum;
}

export const BaseResponseobjectStatusCodeEnum = {
    _100Continue: '100 CONTINUE',
    _101SwitchingProtocols: '101 SWITCHING_PROTOCOLS',
    _102Processing: '102 PROCESSING',
    _103Checkpoint: '103 CHECKPOINT',
    _200Ok: '200 OK',
    _201Created: '201 CREATED',
    _202Accepted: '202 ACCEPTED',
    _203NonAuthoritativeInformation: '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent: '204 NO_CONTENT',
    _205ResetContent: '205 RESET_CONTENT',
    _206PartialContent: '206 PARTIAL_CONTENT',
    _207MultiStatus: '207 MULTI_STATUS',
    _208AlreadyReported: '208 ALREADY_REPORTED',
    _226ImUsed: '226 IM_USED',
    _300MultipleChoices: '300 MULTIPLE_CHOICES',
    _301MovedPermanently: '301 MOVED_PERMANENTLY',
    _302Found: '302 FOUND',
    _302MovedTemporarily: '302 MOVED_TEMPORARILY',
    _303SeeOther: '303 SEE_OTHER',
    _304NotModified: '304 NOT_MODIFIED',
    _305UseProxy: '305 USE_PROXY',
    _307TemporaryRedirect: '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect: '308 PERMANENT_REDIRECT',
    _400BadRequest: '400 BAD_REQUEST',
    _401Unauthorized: '401 UNAUTHORIZED',
    _402PaymentRequired: '402 PAYMENT_REQUIRED',
    _403Forbidden: '403 FORBIDDEN',
    _404NotFound: '404 NOT_FOUND',
    _405MethodNotAllowed: '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable: '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired: '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout: '408 REQUEST_TIMEOUT',
    _409Conflict: '409 CONFLICT',
    _410Gone: '410 GONE',
    _411LengthRequired: '411 LENGTH_REQUIRED',
    _412PreconditionFailed: '412 PRECONDITION_FAILED',
    _413PayloadTooLarge: '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge: '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong: '414 URI_TOO_LONG',
    _414RequestUriTooLong: '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType: '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable: '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed: '417 EXPECTATION_FAILED',
    _418IAmATeapot: '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource: '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure: '420 METHOD_FAILURE',
    _421DestinationLocked: '421 DESTINATION_LOCKED',
    _422UnprocessableEntity: '422 UNPROCESSABLE_ENTITY',
    _423Locked: '423 LOCKED',
    _424FailedDependency: '424 FAILED_DEPENDENCY',
    _425TooEarly: '425 TOO_EARLY',
    _426UpgradeRequired: '426 UPGRADE_REQUIRED',
    _428PreconditionRequired: '428 PRECONDITION_REQUIRED',
    _429TooManyRequests: '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge: '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons: '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError: '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented: '501 NOT_IMPLEMENTED',
    _502BadGateway: '502 BAD_GATEWAY',
    _503ServiceUnavailable: '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout: '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported: '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates: '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage: '507 INSUFFICIENT_STORAGE',
    _508LoopDetected: '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded: '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended: '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired: '511 NETWORK_AUTHENTICATION_REQUIRED'
} as const;

export type BaseResponseobjectStatusCodeEnum = typeof BaseResponseobjectStatusCodeEnum[keyof typeof BaseResponseobjectStatusCodeEnum];


/**
 * AppUserControllerApi - axios parameter creator
 * @export
 */
export const AppUserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createUser
         * @param {string} [birthday] 사용안함 지금은, 비워두세요.
         * @param {string} [city] 
         * @param {string} [county] 
         * @param {string} [email] 
         * @param {string} [nickname] 
         * @param {string} [password] 
         * @param {number} [senseAuditory] 청각의 역치 0 &#x3D; 버티기 힘들어함. 100 &#x3D; 굉장히 잘 버팀.
         * @param {number} [senseOral] 맛, 식감
         * @param {number} [senseProprioceptive] 고유수용감각 - 근육 힘줄 및 관절내에 위치한 기계감각
         * @param {number} [senseTactile] 촉각
         * @param {number} [senseVestibular] 전정계 - 평형감각, 이동감각
         * @param {number} [senseVisual] 시각 
         * @param {string} [type] disabled, guardian, teacher, etc 중에서 하나를 입력하세요.
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST: async (birthday?: string, city?: string, county?: string, email?: string, nickname?: string, password?: string, senseAuditory?: number, senseOral?: number, senseProprioceptive?: number, senseTactile?: number, senseVestibular?: number, senseVisual?: number, type?: string, username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (birthday !== undefined) {
                localVarQueryParameter['birthday'] = (birthday as any instanceof Date) ?
                    (birthday as any).toISOString() :
                    birthday;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (county !== undefined) {
                localVarQueryParameter['county'] = county;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (senseAuditory !== undefined) {
                localVarQueryParameter['sense_auditory'] = senseAuditory;
            }

            if (senseOral !== undefined) {
                localVarQueryParameter['sense_oral'] = senseOral;
            }

            if (senseProprioceptive !== undefined) {
                localVarQueryParameter['sense_proprioceptive'] = senseProprioceptive;
            }

            if (senseTactile !== undefined) {
                localVarQueryParameter['sense_tactile'] = senseTactile;
            }

            if (senseVestibular !== undefined) {
                localVarQueryParameter['sense_vestibular'] = senseVestibular;
            }

            if (senseVisual !== undefined) {
                localVarQueryParameter['sense_visual'] = senseVisual;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getUser
         * @param {number} appUserId appUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET: async (appUserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appUserId' is not null or undefined
            assertParamExists('getUserUsingGET', 'appUserId', appUserId)
            const localVarPath = `/api/user/{appUserId}`
                .replace(`{${"appUserId"}}`, encodeURIComponent(String(appUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loginUser
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUserUsingPOST: async (email?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/auth/access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppUserControllerApi - functional programming interface
 * @export
 */
export const AppUserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppUserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createUser
         * @param {string} [birthday] 사용안함 지금은, 비워두세요.
         * @param {string} [city] 
         * @param {string} [county] 
         * @param {string} [email] 
         * @param {string} [nickname] 
         * @param {string} [password] 
         * @param {number} [senseAuditory] 청각의 역치 0 &#x3D; 버티기 힘들어함. 100 &#x3D; 굉장히 잘 버팀.
         * @param {number} [senseOral] 맛, 식감
         * @param {number} [senseProprioceptive] 고유수용감각 - 근육 힘줄 및 관절내에 위치한 기계감각
         * @param {number} [senseTactile] 촉각
         * @param {number} [senseVestibular] 전정계 - 평형감각, 이동감각
         * @param {number} [senseVisual] 시각 
         * @param {string} [type] disabled, guardian, teacher, etc 중에서 하나를 입력하세요.
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(birthday?: string, city?: string, county?: string, email?: string, nickname?: string, password?: string, senseAuditory?: number, senseOral?: number, senseProprioceptive?: number, senseTactile?: number, senseVestibular?: number, senseVisual?: number, type?: string, username?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsingPOST(birthday, city, county, email, nickname, password, senseAuditory, senseOral, senseProprioceptive, senseTactile, senseVestibular, senseVisual, type, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getUser
         * @param {number} appUserId appUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsingGET(appUserId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserUsingGET(appUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary loginUser
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUserUsingPOST(email?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUserUsingPOST(email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppUserControllerApi - factory interface
 * @export
 */
export const AppUserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppUserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary createUser
         * @param {string} [birthday] 사용안함 지금은, 비워두세요.
         * @param {string} [city] 
         * @param {string} [county] 
         * @param {string} [email] 
         * @param {string} [nickname] 
         * @param {string} [password] 
         * @param {number} [senseAuditory] 청각의 역치 0 &#x3D; 버티기 힘들어함. 100 &#x3D; 굉장히 잘 버팀.
         * @param {number} [senseOral] 맛, 식감
         * @param {number} [senseProprioceptive] 고유수용감각 - 근육 힘줄 및 관절내에 위치한 기계감각
         * @param {number} [senseTactile] 촉각
         * @param {number} [senseVestibular] 전정계 - 평형감각, 이동감각
         * @param {number} [senseVisual] 시각 
         * @param {string} [type] disabled, guardian, teacher, etc 중에서 하나를 입력하세요.
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(birthday?: string, city?: string, county?: string, email?: string, nickname?: string, password?: string, senseAuditory?: number, senseOral?: number, senseProprioceptive?: number, senseTactile?: number, senseVestibular?: number, senseVisual?: number, type?: string, username?: string, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.createUserUsingPOST(birthday, city, county, email, nickname, password, senseAuditory, senseOral, senseProprioceptive, senseTactile, senseVestibular, senseVisual, type, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getUser
         * @param {number} appUserId appUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET(appUserId: number, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.getUserUsingGET(appUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary loginUser
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUserUsingPOST(email?: string, password?: string, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.loginUserUsingPOST(email, password, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppUserControllerApi - object-oriented interface
 * @export
 * @class AppUserControllerApi
 * @extends {BaseAPI}
 */
export class AppUserControllerApi extends BaseAPI {
    /**
     * 
     * @summary createUser
     * @param {string} [birthday] 사용안함 지금은, 비워두세요.
     * @param {string} [city] 
     * @param {string} [county] 
     * @param {string} [email] 
     * @param {string} [nickname] 
     * @param {string} [password] 
     * @param {number} [senseAuditory] 청각의 역치 0 &#x3D; 버티기 힘들어함. 100 &#x3D; 굉장히 잘 버팀.
     * @param {number} [senseOral] 맛, 식감
     * @param {number} [senseProprioceptive] 고유수용감각 - 근육 힘줄 및 관절내에 위치한 기계감각
     * @param {number} [senseTactile] 촉각
     * @param {number} [senseVestibular] 전정계 - 평형감각, 이동감각
     * @param {number} [senseVisual] 시각 
     * @param {string} [type] disabled, guardian, teacher, etc 중에서 하나를 입력하세요.
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppUserControllerApi
     */
    public createUserUsingPOST(birthday?: string, city?: string, county?: string, email?: string, nickname?: string, password?: string, senseAuditory?: number, senseOral?: number, senseProprioceptive?: number, senseTactile?: number, senseVestibular?: number, senseVisual?: number, type?: string, username?: string, options?: AxiosRequestConfig) {
        return AppUserControllerApiFp(this.configuration).createUserUsingPOST(birthday, city, county, email, nickname, password, senseAuditory, senseOral, senseProprioceptive, senseTactile, senseVestibular, senseVisual, type, username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getUser
     * @param {number} appUserId appUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppUserControllerApi
     */
    public getUserUsingGET(appUserId: number, options?: AxiosRequestConfig) {
        return AppUserControllerApiFp(this.configuration).getUserUsingGET(appUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary loginUser
     * @param {string} [email] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppUserControllerApi
     */
    public loginUserUsingPOST(email?: string, password?: string, options?: AxiosRequestConfig) {
        return AppUserControllerApiFp(this.configuration).loginUserUsingPOST(email, password, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeedControllerApi - axios parameter creator
 * @export
 */
export const FeedControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNewFeed
         * @param {string} [addressCategory] 이 api는 swagger에서는 잘 동작하지 않습니다. multipart/form-data 걸어서 postman으로 태스트 해주세요. 카테고리 ex) 음식점, 병원 등등
         * @param {string} [addressCity] 주소중에 큰거. 경기도/충청북도 등등
         * @param {string} [addressCounty] 주소중에 세부, 수원시/~~동 등등
         * @param {number} [addressLatitude] 
         * @param {number} [addressLongitude] 
         * @param {string} [addressPlaceName] 
         * @param {string} [hashTags] \&#39;#안녕 #만나서 #반가워\&#39;와 같이 여러 해시태그를 긴 문자열로 넣어주세요.
         * @param {Array<File>} [photos] 
         * @param {number} [senseAuditory] 청각 0이 자극 없음 100이 자극강함. 상관없어 보이는 경우 0을 입력.
         * @param {number} [senseOral] 맛, 식감
         * @param {number} [senseProprioceptive] 고유수용감각 - 근육 힘줄 및 관절내에 위치한 기계감각
         * @param {number} [senseTactile] 촉각
         * @param {number} [senseVestibular] 전정계 - 평형감각, 이동감각
         * @param {number} [senseVisual] 시각
         * @param {string} [text] 
         * @param {string} [title] 
         * @param {number} [writerId] appUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFeedUsingPOST: async (addressCategory?: string, addressCity?: string, addressCounty?: string, addressLatitude?: number, addressLongitude?: number, addressPlaceName?: string, hashTags?: string, photos?: Array<File>, senseAuditory?: number, senseOral?: number, senseProprioceptive?: number, senseTactile?: number, senseVestibular?: number, senseVisual?: number, text?: string, title?: string, writerId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (addressCategory !== undefined) {
                localVarQueryParameter['address_category'] = addressCategory;
            }

            if (addressCity !== undefined) {
                localVarQueryParameter['address_city'] = addressCity;
            }

            if (addressCounty !== undefined) {
                localVarQueryParameter['address_county'] = addressCounty;
            }

            if (addressLatitude !== undefined) {
                localVarQueryParameter['address_latitude'] = addressLatitude;
            }

            if (addressLongitude !== undefined) {
                localVarQueryParameter['address_longitude'] = addressLongitude;
            }

            if (addressPlaceName !== undefined) {
                localVarQueryParameter['address_placeName'] = addressPlaceName;
            }

            if (hashTags !== undefined) {
                localVarQueryParameter['hashTags'] = hashTags;
            }

            if (photos) {
                localVarQueryParameter['photos'] = photos;
            }

            if (senseAuditory !== undefined) {
                localVarQueryParameter['sense_auditory'] = senseAuditory;
            }

            if (senseOral !== undefined) {
                localVarQueryParameter['sense_oral'] = senseOral;
            }

            if (senseProprioceptive !== undefined) {
                localVarQueryParameter['sense_proprioceptive'] = senseProprioceptive;
            }

            if (senseTactile !== undefined) {
                localVarQueryParameter['sense_tactile'] = senseTactile;
            }

            if (senseVestibular !== undefined) {
                localVarQueryParameter['sense_vestibular'] = senseVestibular;
            }

            if (senseVisual !== undefined) {
                localVarQueryParameter['sense_visual'] = senseVisual;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (writerId !== undefined) {
                localVarQueryParameter['writerId'] = writerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFeedDetail
         * @param {number} feedId feedId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedDetailUsingGET: async (feedId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('getFeedDetailUsingGET', 'feedId', feedId)
            const localVarPath = `/api/feed/detail/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFeeds
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedsUsingGET: async (pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary searchFeeds
         * @param {boolean} [doSenseFilter] 
         * @param {number} [enLatitude] top
         * @param {number} [enLongitude] right
         * @param {string} [hashTag] 
         * @param {string} [searchKeyWord] 
         * @param {number} [userId] 
         * @param {number} [wsLatitude] bottom
         * @param {number} [wsLongitude] left
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFeedsUsingPOST: async (doSenseFilter?: boolean, enLatitude?: number, enLongitude?: number, hashTag?: string, searchKeyWord?: string, userId?: number, wsLatitude?: number, wsLongitude?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feed/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (doSenseFilter !== undefined) {
                localVarQueryParameter['doSenseFilter'] = doSenseFilter;
            }

            if (enLatitude !== undefined) {
                localVarQueryParameter['en_latitude'] = enLatitude;
            }

            if (enLongitude !== undefined) {
                localVarQueryParameter['en_longitude'] = enLongitude;
            }

            if (hashTag !== undefined) {
                localVarQueryParameter['hashTag'] = hashTag;
            }

            if (searchKeyWord !== undefined) {
                localVarQueryParameter['searchKeyWord'] = searchKeyWord;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (wsLatitude !== undefined) {
                localVarQueryParameter['ws_latitude'] = wsLatitude;
            }

            if (wsLongitude !== undefined) {
                localVarQueryParameter['ws_longitude'] = wsLongitude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedControllerApi - functional programming interface
 * @export
 */
export const FeedControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createNewFeed
         * @param {string} [addressCategory] 이 api는 swagger에서는 잘 동작하지 않습니다. multipart/form-data 걸어서 postman으로 태스트 해주세요. 카테고리 ex) 음식점, 병원 등등
         * @param {string} [addressCity] 주소중에 큰거. 경기도/충청북도 등등
         * @param {string} [addressCounty] 주소중에 세부, 수원시/~~동 등등
         * @param {number} [addressLatitude] 
         * @param {number} [addressLongitude] 
         * @param {string} [addressPlaceName] 
         * @param {string} [hashTags] \&#39;#안녕 #만나서 #반가워\&#39;와 같이 여러 해시태그를 긴 문자열로 넣어주세요.
         * @param {Array<File>} [photos] 
         * @param {number} [senseAuditory] 청각 0이 자극 없음 100이 자극강함. 상관없어 보이는 경우 0을 입력.
         * @param {number} [senseOral] 맛, 식감
         * @param {number} [senseProprioceptive] 고유수용감각 - 근육 힘줄 및 관절내에 위치한 기계감각
         * @param {number} [senseTactile] 촉각
         * @param {number} [senseVestibular] 전정계 - 평형감각, 이동감각
         * @param {number} [senseVisual] 시각
         * @param {string} [text] 
         * @param {string} [title] 
         * @param {number} [writerId] appUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFeedUsingPOST(addressCategory?: string, addressCity?: string, addressCounty?: string, addressLatitude?: number, addressLongitude?: number, addressPlaceName?: string, hashTags?: string, photos?: Array<File>, senseAuditory?: number, senseOral?: number, senseProprioceptive?: number, senseTactile?: number, senseVestibular?: number, senseVisual?: number, text?: string, title?: string, writerId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewFeedUsingPOST(addressCategory, addressCity, addressCounty, addressLatitude, addressLongitude, addressPlaceName, hashTags, photos, senseAuditory, senseOral, senseProprioceptive, senseTactile, senseVestibular, senseVisual, text, title, writerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getFeedDetail
         * @param {number} feedId feedId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedDetailUsingGET(feedId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedDetailUsingGET(feedId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getFeeds
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedsUsingGET(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedsUsingGET(pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary searchFeeds
         * @param {boolean} [doSenseFilter] 
         * @param {number} [enLatitude] top
         * @param {number} [enLongitude] right
         * @param {string} [hashTag] 
         * @param {string} [searchKeyWord] 
         * @param {number} [userId] 
         * @param {number} [wsLatitude] bottom
         * @param {number} [wsLongitude] left
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFeedsUsingPOST(doSenseFilter?: boolean, enLatitude?: number, enLongitude?: number, hashTag?: string, searchKeyWord?: string, userId?: number, wsLatitude?: number, wsLongitude?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFeedsUsingPOST(doSenseFilter, enLatitude, enLongitude, hashTag, searchKeyWord, userId, wsLatitude, wsLongitude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedControllerApi - factory interface
 * @export
 */
export const FeedControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary createNewFeed
         * @param {string} [addressCategory] 이 api는 swagger에서는 잘 동작하지 않습니다. multipart/form-data 걸어서 postman으로 태스트 해주세요. 카테고리 ex) 음식점, 병원 등등
         * @param {string} [addressCity] 주소중에 큰거. 경기도/충청북도 등등
         * @param {string} [addressCounty] 주소중에 세부, 수원시/~~동 등등
         * @param {number} [addressLatitude] 
         * @param {number} [addressLongitude] 
         * @param {string} [addressPlaceName] 
         * @param {string} [hashTags] \&#39;#안녕 #만나서 #반가워\&#39;와 같이 여러 해시태그를 긴 문자열로 넣어주세요.
         * @param {Array<File>} [photos] 
         * @param {number} [senseAuditory] 청각 0이 자극 없음 100이 자극강함. 상관없어 보이는 경우 0을 입력.
         * @param {number} [senseOral] 맛, 식감
         * @param {number} [senseProprioceptive] 고유수용감각 - 근육 힘줄 및 관절내에 위치한 기계감각
         * @param {number} [senseTactile] 촉각
         * @param {number} [senseVestibular] 전정계 - 평형감각, 이동감각
         * @param {number} [senseVisual] 시각
         * @param {string} [text] 
         * @param {string} [title] 
         * @param {number} [writerId] appUserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFeedUsingPOST(addressCategory?: string, addressCity?: string, addressCounty?: string, addressLatitude?: number, addressLongitude?: number, addressPlaceName?: string, hashTags?: string, photos?: Array<File>, senseAuditory?: number, senseOral?: number, senseProprioceptive?: number, senseTactile?: number, senseVestibular?: number, senseVisual?: number, text?: string, title?: string, writerId?: number, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.createNewFeedUsingPOST(addressCategory, addressCity, addressCounty, addressLatitude, addressLongitude, addressPlaceName, hashTags, photos, senseAuditory, senseOral, senseProprioceptive, senseTactile, senseVestibular, senseVisual, text, title, writerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFeedDetail
         * @param {number} feedId feedId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedDetailUsingGET(feedId: number, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.getFeedDetailUsingGET(feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFeeds
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedsUsingGET(pageNo?: number, pageSize?: number, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.getFeedsUsingGET(pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary searchFeeds
         * @param {boolean} [doSenseFilter] 
         * @param {number} [enLatitude] top
         * @param {number} [enLongitude] right
         * @param {string} [hashTag] 
         * @param {string} [searchKeyWord] 
         * @param {number} [userId] 
         * @param {number} [wsLatitude] bottom
         * @param {number} [wsLongitude] left
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFeedsUsingPOST(doSenseFilter?: boolean, enLatitude?: number, enLongitude?: number, hashTag?: string, searchKeyWord?: string, userId?: number, wsLatitude?: number, wsLongitude?: number, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.searchFeedsUsingPOST(doSenseFilter, enLatitude, enLongitude, hashTag, searchKeyWord, userId, wsLatitude, wsLongitude, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedControllerApi - object-oriented interface
 * @export
 * @class FeedControllerApi
 * @extends {BaseAPI}
 */
export class FeedControllerApi extends BaseAPI {
    /**
     * 
     * @summary createNewFeed
     * @param {string} [addressCategory] 이 api는 swagger에서는 잘 동작하지 않습니다. multipart/form-data 걸어서 postman으로 태스트 해주세요. 카테고리 ex) 음식점, 병원 등등
     * @param {string} [addressCity] 주소중에 큰거. 경기도/충청북도 등등
     * @param {string} [addressCounty] 주소중에 세부, 수원시/~~동 등등
     * @param {number} [addressLatitude] 
     * @param {number} [addressLongitude] 
     * @param {string} [addressPlaceName] 
     * @param {string} [hashTags] \&#39;#안녕 #만나서 #반가워\&#39;와 같이 여러 해시태그를 긴 문자열로 넣어주세요.
     * @param {Array<File>} [photos] 
     * @param {number} [senseAuditory] 청각 0이 자극 없음 100이 자극강함. 상관없어 보이는 경우 0을 입력.
     * @param {number} [senseOral] 맛, 식감
     * @param {number} [senseProprioceptive] 고유수용감각 - 근육 힘줄 및 관절내에 위치한 기계감각
     * @param {number} [senseTactile] 촉각
     * @param {number} [senseVestibular] 전정계 - 평형감각, 이동감각
     * @param {number} [senseVisual] 시각
     * @param {string} [text] 
     * @param {string} [title] 
     * @param {number} [writerId] appUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public createNewFeedUsingPOST(addressCategory?: string, addressCity?: string, addressCounty?: string, addressLatitude?: number, addressLongitude?: number, addressPlaceName?: string, hashTags?: string, photos?: Array<File>, senseAuditory?: number, senseOral?: number, senseProprioceptive?: number, senseTactile?: number, senseVestibular?: number, senseVisual?: number, text?: string, title?: string, writerId?: number, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).createNewFeedUsingPOST(addressCategory, addressCity, addressCounty, addressLatitude, addressLongitude, addressPlaceName, hashTags, photos, senseAuditory, senseOral, senseProprioceptive, senseTactile, senseVestibular, senseVisual, text, title, writerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFeedDetail
     * @param {number} feedId feedId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public getFeedDetailUsingGET(feedId: number, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).getFeedDetailUsingGET(feedId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFeeds
     * @param {number} [pageNo] pageNo
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public getFeedsUsingGET(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).getFeedsUsingGET(pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary searchFeeds
     * @param {boolean} [doSenseFilter] 
     * @param {number} [enLatitude] top
     * @param {number} [enLongitude] right
     * @param {string} [hashTag] 
     * @param {string} [searchKeyWord] 
     * @param {number} [userId] 
     * @param {number} [wsLatitude] bottom
     * @param {number} [wsLongitude] left
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public searchFeedsUsingPOST(doSenseFilter?: boolean, enLatitude?: number, enLongitude?: number, hashTag?: string, searchKeyWord?: string, userId?: number, wsLatitude?: number, wsLongitude?: number, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).searchFeedsUsingPOST(doSenseFilter, enLatitude, enLongitude, hashTag, searchKeyWord, userId, wsLatitude, wsLongitude, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocationControllerApi - axios parameter creator
 * @export
 */
export const LocationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getLocationById
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationByIdUsingGET: async (locationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getLocationByIdUsingGET', 'locationId', locationId)
            const localVarPath = `/api/location/{locationId}`
                .replace(`{${"locationId"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationControllerApi - functional programming interface
 * @export
 */
export const LocationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getLocationById
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationByIdUsingGET(locationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationByIdUsingGET(locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationControllerApi - factory interface
 * @export
 */
export const LocationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary getLocationById
         * @param {number} locationId locationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationByIdUsingGET(locationId: number, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.getLocationByIdUsingGET(locationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationControllerApi - object-oriented interface
 * @export
 * @class LocationControllerApi
 * @extends {BaseAPI}
 */
export class LocationControllerApi extends BaseAPI {
    /**
     * 
     * @summary getLocationById
     * @param {number} locationId locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationControllerApi
     */
    public getLocationByIdUsingGET(locationId: number, options?: AxiosRequestConfig) {
        return LocationControllerApiFp(this.configuration).getLocationByIdUsingGET(locationId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PhotoControllerApi - axios parameter creator
 * @export
 */
export const PhotoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getPhotoById
         * @param {number} photoId photoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhotoByIdUsingGET: async (photoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            assertParamExists('getPhotoByIdUsingGET', 'photoId', photoId)
            const localVarPath = `/api/photo/{photoId}`
                .replace(`{${"photoId"}}`, encodeURIComponent(String(photoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary photoUploadTest
         * @param {Array<string>} photos File
         * @param {string} [text] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoUploadTestUsingPOST: async (photos: Array<string>, text?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photos' is not null or undefined
            assertParamExists('photoUploadTestUsingPOST', 'photos', photos)
            const localVarPath = `/api/photo/several`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (photos) {
                localVarFormParams.append('photos', photos.join(COLLECTION_FORMATS.csv));
            }

    
            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary photoUploadTest
         * @param {File} [photo] photo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoUploadTestUsingPOST1: async (photo?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/photo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotoControllerApi - functional programming interface
 * @export
 */
export const PhotoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getPhotoById
         * @param {number} photoId photoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhotoByIdUsingGET(photoId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhotoByIdUsingGET(photoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary photoUploadTest
         * @param {Array<string>} photos File
         * @param {string} [text] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photoUploadTestUsingPOST(photos: Array<string>, text?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photoUploadTestUsingPOST(photos, text, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary photoUploadTest
         * @param {File} [photo] photo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photoUploadTestUsingPOST1(photo?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photoUploadTestUsingPOST1(photo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhotoControllerApi - factory interface
 * @export
 */
export const PhotoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotoControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary getPhotoById
         * @param {number} photoId photoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhotoByIdUsingGET(photoId: number, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.getPhotoByIdUsingGET(photoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary photoUploadTest
         * @param {Array<string>} photos File
         * @param {string} [text] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoUploadTestUsingPOST(photos: Array<string>, text?: string, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.photoUploadTestUsingPOST(photos, text, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary photoUploadTest
         * @param {File} [photo] photo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoUploadTestUsingPOST1(photo?: File, options?: any): AxiosPromise<BaseResponseobject> {
            return localVarFp.photoUploadTestUsingPOST1(photo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhotoControllerApi - object-oriented interface
 * @export
 * @class PhotoControllerApi
 * @extends {BaseAPI}
 */
export class PhotoControllerApi extends BaseAPI {
    /**
     * 
     * @summary getPhotoById
     * @param {number} photoId photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public getPhotoByIdUsingGET(photoId: number, options?: AxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration).getPhotoByIdUsingGET(photoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary photoUploadTest
     * @param {Array<string>} photos File
     * @param {string} [text] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public photoUploadTestUsingPOST(photos: Array<string>, text?: string, options?: AxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration).photoUploadTestUsingPOST(photos, text, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary photoUploadTest
     * @param {File} [photo] photo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoControllerApi
     */
    public photoUploadTestUsingPOST1(photo?: File, options?: AxiosRequestConfig) {
        return PhotoControllerApiFp(this.configuration).photoUploadTestUsingPOST1(photo, options).then((request) => request(this.axios, this.basePath));
    }
}


